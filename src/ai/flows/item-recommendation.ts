// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview AI-powered item recommendation flow.
 *
 * - getItemRecommendations - A function that handles the item recommendation process.
 * - ItemRecommendationInput - The input type for the getItemRecommendations function.
 * - ItemRecommendationOutput - The return type for the getItemRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ItemRecommendationInputSchema = z.object({
  itemSpecifications: z
    .string()
    .describe(
      'Detailed specifications of the items currently being manufactured.'
    ),
});
export type ItemRecommendationInput = z.infer<
  typeof ItemRecommendationInputSchema
>;

const ItemRecommendationOutputSchema = z.object({
  recommendedItems: z
    .string()
    .describe(
      'A list of recommended items based on the provided specifications.'
    ),
  supplierInformation: z
    .string()
    .describe('Information about the suppliers of the recommended items.'),
});
export type ItemRecommendationOutput = z.infer<
  typeof ItemRecommendationOutputSchema
>;

export async function getItemRecommendations(
  input: ItemRecommendationInput
): Promise<ItemRecommendationOutput> {
  return itemRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'itemRecommendationPrompt',
  input: {schema: ItemRecommendationInputSchema},
  output: {schema: ItemRecommendationOutputSchema},
  prompt: `You are an AI assistant that suggests items to purchasing managers based on the specifications of the items they are currently manufacturing.

  Given the following item specifications:
  {{itemSpecifications}}

  Recommend a list of items that would be suitable for their needs, and provide information about the suppliers of those items.
  Please format your response as a list of items, each with a brief description and the supplier's name and contact information.
  `,
});

const itemRecommendationFlow = ai.defineFlow(
  {
    name: 'itemRecommendationFlow',
    inputSchema: ItemRecommendationInputSchema,
    outputSchema: ItemRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
