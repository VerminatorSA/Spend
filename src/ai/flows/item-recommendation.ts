
// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview AI-powered item recommendation flow.
 *
 * - getAiAssistantResponse - A function that handles the item recommendation process.
 * - AiAssistantInput - The input type for the getAiAssistantResponse function.
 * - AiAssistantOutput - The return type for the getAiAssistantResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getLowStockItems } from '@/services/inventory-service';
import { createTask } from '@/services/task-service';

const AiAssistantInputSchema = z.object({
  query: z
    .string()
    .describe(
      'The user\'s request or question for the AI assistant.'
    ),
});
export type AiAssistantInput = z.infer<
  typeof AiAssistantInputSchema
>;

const AiAssistantOutputSchema = z.object({
  response: z
    .string()
    .describe(
      'The AI assistant\'s response to the user.'
    ),
  isWarning: z.boolean().describe('Set to true if the response is a critical warning or alert.')
});
export type AiAssistantOutput = z.infer<
  typeof AiAssistantOutputSchema
>;

const inventoryAlertTool = ai.defineTool(
    {
        name: 'getInventoryAlerts',
        description: 'Get a list of items that are low on stock or out of stock.',
        outputSchema: z.any(),
    },
    async () => {
        return await getLowStockItems();
    }
);

const createTaskTool = ai.defineTool(
    {
        name: 'createTask',
        description: 'Creates a new task and adds it to the user\'s task list. Use this when the user asks to be reminded about something or to create a to-do item.',
        inputSchema: z.object({
            title: z.string().describe('The title of the task.'),
            description: z.string().optional().describe('A longer description of the task.'),
            priority: z.enum(['High', 'Medium', 'Low']).describe('The priority of the task.'),
            dueDate: z.string().optional().describe('The due date for the task in YYYY-MM-DD format.'),
        }),
        outputSchema: z.string(),
    },
    async (input) => {
        try {
            await createTask(input);
            return 'Task created successfully.';
        } catch (e: any) {
            return `Error creating task: ${e.message}`;
        }
    }
);


export async function getAiAssistantResponse(
  input: AiAssistantInput
): Promise<AiAssistantOutput> {
  return aiAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiAssistantPrompt',
  input: {schema: AiAssistantInputSchema},
  output: {schema: AiAssistantOutputSchema},
  tools: [inventoryAlertTool, createTaskTool],
  prompt: `You are an AI assistant named 'Spencer', specializing in procurement and spend management for purchasing managers. You are an agent integrated into this application called Spend.

Your capabilities include:
- Assisting users by suggesting items based on their manufacturing specifications.
- Answering questions about the application's features (Dashboard, Inventory, Contacts, Reports, Settings).
- Providing motivational or relevant business quotations when appropriate.
- Engaging in friendly conversation and greetings.
- Proactively checking for and reporting on inventory issues using your tools.
- Creating tasks and reminders for the user when they request it.

When a user starts a conversation, first check for any inventory alerts. If there are items that are low on stock or out of stock, your first priority is to report these as a critical warning. In this case, set the 'isWarning' flag to true.

If the user asks you to remind them of something or to create a to-do item, use the createTask tool. When creating a task, confirm its creation in your response.

If there are no alerts, or after you have reported the alerts, respond to the user's query conversationally and helpfully, in character as the 'Spencer' AI assistant.

When a user asks for item recommendations, provide a detailed list with descriptions and potential suppliers. For all other interactions, respond conversationally and helpfully.

User Query:
{{query}}
`,
});

const aiAssistantFlow = ai.defineFlow(
  {
    name: 'aiAssistantFlow',
    inputSchema: AiAssistantInputSchema,
    outputSchema: AiAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
