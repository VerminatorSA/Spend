
// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview AI-powered item recommendation flow.
 *
 * - getAiAssistantResponse - A function that handles the item recommendation process.
 * - AiAssistantInput - The input type for the getAiAssistantResponse function.
 * - AiAssistantOutput - The return type for the getAiAssistantResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiAssistantInputSchema = z.object({
  query: z
    .string()
    .describe(
      'The user\'s request or question for the AI assistant.'
    ),
});
export type AiAssistantInput = z.infer<
  typeof AiAssistantInputSchema
>;

const AiAssistantOutputSchema = z.object({
  response: z
    .string()
    .describe(
      'The AI assistant\'s response to the user.'
    ),
});
export type AiAssistantOutput = z.infer<
  typeof AiAssistantOutputSchema
>;

export async function getAiAssistantResponse(
  input: AiAssistantInput
): Promise<AiAssistantOutput> {
  return aiAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiAssistantPrompt',
  input: {schema: AiAssistantInputSchema},
  output: {schema: AiAssistantOutputSchema},
  prompt: `You are an AI assistant named 'Spend', specializing in procurement and spend management for purchasing managers. You are an agent integrated into this application.

Your capabilities include:
- Assisting users by suggesting items based on their manufacturing specifications.
- Answering questions about the application's features (Dashboard, Inventory, Contacts, Reports, Settings).
- Providing motivational or relevant business quotations when appropriate.
- Offering helpful warnings or tips about the system.
- Engaging in friendly conversation and greetings.

When a user asks for item recommendations, provide a detailed list with descriptions and potential suppliers. For all other interactions, respond conversationally and helpfully, in character as the 'Spend' AI assistant.

User Query:
{{query}}
`,
});

const aiAssistantFlow = ai.defineFlow(
  {
    name: 'aiAssistantFlow',
    inputSchema: AiAssistantInputSchema,
    outputSchema: AiAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

